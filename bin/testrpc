#!/usr/bin/env node
var yargs = require('yargs');
var TestRPC = require('..');
var pkg = require("../package.json");
var util = require("ethereumjs-util");
var URL = require("url");
var Web3 = require("web3");
var web3 = new Web3(); // Used only for its BigNumber library.

yargs
.usage('Usage: $0 [options...] ')
// .command('start', 'Start the server')
.option('port', {
  describe: 'The port to serve',
  alias: 'p',
  type: 'string',   // for compativility with previous version
  default: '8545'
})
.option('hostname', {
  describe: 'Hostname to listen on. Defaults to Node\'s server.listen() default.',
  alias: 'h',
  type: 'string'
})
.option('debug', {
  describe: 'Output VM opcodes for debugging',
  type: 'boolean',
  default: false
})
.option('deterministic', {
  describe: 'Generate deterministic addresses based on a pre-defined mnemonic.',
  alias: 'd',
  type: 'boolean',
  default: false
})
.option('seed', {
  describe: 'Use arbitrary data to generate the HD wallet mnemonic to be used.',
  alias: 's',
  type: 'string',
  default: 'TestRPC is awesome!'
})
.option('mnemonic', {
  describe: 'Use a specific HD wallet mnemonic to generate initial addresses.',
  alias: 'm',
  type: 'string'
})
.option('total_accounts', {
  describe: 'Number of accounts to generate at startup.',
  alias: 't',
  type: 'integer',
  default: 10
})
.option('blocktime', {
  describe: 'Specify blocktime in seconds for automatic mining. Default is 0 and no auto-mining.',
  alias: 'b',
  type: 'integer',
  default: 0
})
.option('gasPrice', {
  describe: 'Use a custom Gas Price (defaults to 1)',
  alias: 'g',
  type: 'integer',
  default: 1
})
.option('gasLimit', {
  describe: 'Use a custom Gas Limit (defaults to 0x47E7C4)',
  alias: 'l',
  type: 'integer',
  default: 4712388 // 0x47E7C4
})
.option('account', {
  describe: 'Specify the accounts to generate at startup. testrpc --account="<privatekey with 0x>,<balance in wei>" [--account="<privatekey>,balance"]',
  alias: 'a',
  type: 'string'
})
.option('fork', {
  describe: 'Fork from another currently running Ethereum client at a given block. Input should be the HTTP location and port of the other client, e.g. http://localhost:8545. You can optionally specify the block to fork from using an @ sign: http://localhost:8545@1599200',
  alias: 'f',
  type: 'string'
})
.option('network_id', {
  describe: 'The network id',
  alias: 'i',
  type: 'integer',
  default: 1377
})
.option('verbose', {
  describe: 'Tell me more!',
  alias: 'v',
  type: 'boolean',
  default: false
})
.option('help', {
  describe: 'Show some help',
  type: 'boolean',
  default: false
})
.option('version', {
  describe: 'Show the version',
  type: 'boolean',
  default: false
})
.option("secure", {
  type: "boolean",
  describe: 'All accounts are locked by default',
  alias: "n",
  default: false
})
.option("unlock", {
  type: "string",
  alias: "u"
})
.strict()
.showHelpOnFail(true);

var argv = yargs.argv;

function parseAccounts(accounts) {
  function splitAccount(account) {
    account = account.split(',');
    return {
      secretKey: account[0],
      balance: account[1]
    };
  }

  if (typeof accounts === 'string')
    return [ splitAccount(accounts) ];
  else if (!Array.isArray(accounts))
    return;

  var ret = [];
  for (var i = 0; i < accounts.length; i++) {
    ret.push(splitAccount(accounts[i]));
  }
  return ret;
}

if (argv.d || argv.deterministic) {
  argv.s = "TestRPC is awesome!";
}

if (typeof argv.unlock == "string") {
  argv.unlock = [argv.unlock];
}

var logger = console;

// If the mem argument is passed, only show memory output,
// not transaction history.
if (argv.mem === true) {
  logger = {
    log: function() {}
  };

  setInterval(function() {
    console.log(process.memoryUsage());
  }, 1000);
}

var options = {
  port: argv.port,
  hostname: argv.hostname,
  debug: argv.debug,
  seed: argv.seed,
  mnemonic: argv.mnemonic,
  total_accounts: argv.total_accounts,
  blocktime: argv.blocktime,
  gasPrice: argv.gasPrice,
  gasLimit: argv.gasLimit,
  accounts: parseAccounts(argv.account),
  unlocked_accounts: argv.unlock,
  fork: argv.fork,
  network_id: argv.network_id,
  verbose: argv.verbose,
  secure: argv.secure,
  logger: console
};

var fork_address;

if (argv.help) {
  console.log('This is TestRPC version '+ pkg.version);
  console.log('More at ' + pkg.repository.url);
  yargs.showHelp();
  process.exit(0);
}

if (argv.version) {
  console.log('TestRPC version '+ pkg.version);
  process.exit(0);
}

// If we're forking from another client, don't try to use the same port.
if (options.fork) {
  var split = options.fork.split("@");
  fork_address = split[0];
  var block;
  if (split.length > 1) {
    block = split[1];
  }

  if (URL.parse(fork_address).port == options.port) {
    options.port = (parseInt(options.port) + 1);
  }

  options.fork = fork_address + (block != null ? "@" + block : "");
}

var server = TestRPC.server(options);

console.log("EthereumJS TestRPC v" + pkg.version);
server.listen(options.port, options.hostname, function(err, state) {
  if (err) {
    console.log(err);
    return;
  }
  console.log("");
  console.log("Available Accounts");
  console.log("==================");

  var accounts = state.accounts;
  var addresses = Object.keys(accounts);

  addresses.forEach(function(address, index) {
    var line = "(" + index + ") " + address;

    if (state.isUnlocked(address) == false) {
      line += " ðŸ”’";
    }

    console.log(line);
  });

  console.log("");
  console.log("Private Keys");
  console.log("==================");

  addresses.forEach(function(address, index) {
    console.log("(" + index + ") " + accounts[address].secretKey.toString("hex"));
  });

  if (options.accounts == null) {
    console.log("");
    console.log("HD Wallet");
    console.log("==================");
    console.log("Mnemonic:      " + state.mnemonic);
    console.log("Base HD Path:  " + state.wallet_hdpath + "{account_index}");
  }

  if (options.gasPrice) {
    console.log("");
    console.log("Gas Price");
    console.log("==================");
    console.log(options.gasPrice);
  }

  if (options.gasLimit) {
    console.log("");
    console.log("Gas Limit");
    console.log("==================");
    console.log(options.gasLimit);
  }

  if (options.fork) {
    console.log("");
    console.log("Forked Chain");
    console.log("==================");
    console.log("Location:    " + fork_address);
    console.log("Block:       " + web3.toBigNumber(state.blockchain.fork_block_number).toString(10));
    console.log("Network ID:  " + state.net_version);
    console.log("Time:        " + (state.blockchain.startTime || new Date()).toString());
  }

  console.log("");
  console.log("Listening on " + (options.hostname || "localhost") + ":" + options.port);
});



// See http://stackoverflow.com/questions/10021373/what-is-the-windows-equivalent-of-process-onsigint-in-node-js
if (process.platform === "win32") {
  require("readline").createInterface({
    input: process.stdin,
    output: process.stdout
  })
  .on("SIGINT", function () {
    process.emit("SIGINT");
  });
}

process.on("SIGINT", function () {
  // graceful shutdown
  server.close(function(err) {
    if (err) {
      console.log(err.stack || err);
    }
    process.exit();
  });
});
